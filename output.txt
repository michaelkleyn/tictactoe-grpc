=== /Users/michaelkleyn/Projects/apps/tictactoe-grpc/terraform/outputs.tf ===

=== /Users/michaelkleyn/Projects/apps/tictactoe-grpc/terraform/main.tf ===

=== /Users/michaelkleyn/Projects/apps/tictactoe-grpc/terraform/variables.tf ===

=== /Users/michaelkleyn/Projects/apps/tictactoe-grpc/proto/game_grpc.pb.go ===
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/game.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameService_CreateGame_FullMethodName        = "/proto.GameService/CreateGame"
	GameService_JoinGame_FullMethodName          = "/proto.GameService/JoinGame"
	GameService_MakeMove_FullMethodName          = "/proto.GameService/MakeMove"
	GameService_StreamGameUpdates_FullMethodName = "/proto.GameService/StreamGameUpdates"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error)
	StreamGameUpdates(ctx context.Context, in *StreamGameUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameUpdate], error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, GameService_CreateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, GameService_JoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeMoveResponse)
	err := c.cc.Invoke(ctx, GameService_MakeMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StreamGameUpdates(ctx context.Context, in *StreamGameUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], GameService_StreamGameUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamGameUpdatesRequest, GameUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamGameUpdatesClient = grpc.ServerStreamingClient[GameUpdate]

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility.
type GameServiceServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error)
	StreamGameUpdates(*StreamGameUpdatesRequest, grpc.ServerStreamingServer[GameUpdate]) error
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServiceServer struct{}

func (UnimplementedGameServiceServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameServiceServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedGameServiceServer) MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedGameServiceServer) StreamGameUpdates(*StreamGameUpdatesRequest, grpc.ServerStreamingServer[GameUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGameUpdates not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}
func (UnimplementedGameServiceServer) testEmbeddedByValue()                     {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_MakeMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).MakeMove(ctx, req.(*MakeMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StreamGameUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGameUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).StreamGameUpdates(m, &grpc.GenericServerStream[StreamGameUpdatesRequest, GameUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamGameUpdatesServer = grpc.ServerStreamingServer[GameUpdate]

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _GameService_CreateGame_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _GameService_JoinGame_Handler,
		},
		{
			MethodName: "MakeMove",
			Handler:    _GameService_MakeMove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGameUpdates",
			Handler:       _GameService_StreamGameUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/game.proto",
}

=== /Users/michaelkleyn/Projects/apps/tictactoe-grpc/proto/game.pb.go ===
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: proto/game.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameStatus int32

const (
	GameStatus_WAITING_FOR_PLAYER GameStatus = 0
	GameStatus_IN_PROGRESS        GameStatus = 1
	GameStatus_FINISHED           GameStatus = 2
)

// Enum value maps for GameStatus.
var (
	GameStatus_name = map[int32]string{
		0: "WAITING_FOR_PLAYER",
		1: "IN_PROGRESS",
		2: "FINISHED",
	}
	GameStatus_value = map[string]int32{
		"WAITING_FOR_PLAYER": 0,
		"IN_PROGRESS":        1,
		"FINISHED":           2,
	}
)

func (x GameStatus) Enum() *GameStatus {
	p := new(GameStatus)
	*p = x
	return p
}

func (x GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_proto_enumTypes[0].Descriptor()
}

func (GameStatus) Type() protoreflect.EnumType {
	return &file_proto_game_proto_enumTypes[0]
}

func (x GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameStatus.Descriptor instead.
func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{0}
}

type Mark int32

const (
	Mark_EMPTY Mark = 0
	Mark_X     Mark = 1
	Mark_O     Mark = 2
)

// Enum value maps for Mark.
var (
	Mark_name = map[int32]string{
		0: "EMPTY",
		1: "X",
		2: "O",
	}
	Mark_value = map[string]int32{
		"EMPTY": 0,
		"X":     1,
		"O":     2,
	}
)

func (x Mark) Enum() *Mark {
	p := new(Mark)
	*p = x
	return p
}

func (x Mark) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mark) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_game_proto_enumTypes[1].Descriptor()
}

func (Mark) Type() protoreflect.EnumType {
	return &file_proto_game_proto_enumTypes[1]
}

func (x Mark) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mark.Descriptor instead.
func (Mark) EnumDescriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{1}
}

type CreateGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (x *CreateGameRequest) Reset() {
	*x = CreateGameRequest{}
	mi := &file_proto_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGameRequest) ProtoMessage() {}

func (x *CreateGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGameRequest.ProtoReflect.Descriptor instead.
func (*CreateGameRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{0}
}

func (x *CreateGameRequest) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type CreateGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *CreateGameResponse) Reset() {
	*x = CreateGameResponse{}
	mi := &file_proto_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGameResponse) ProtoMessage() {}

func (x *CreateGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGameResponse.ProtoReflect.Descriptor instead.
func (*CreateGameResponse) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGameResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *CreateGameResponse) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type JoinGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId     string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (x *JoinGameRequest) Reset() {
	*x = JoinGameRequest{}
	mi := &file_proto_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameRequest) ProtoMessage() {}

func (x *JoinGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameRequest.ProtoReflect.Descriptor instead.
func (*JoinGameRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{2}
}

func (x *JoinGameRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *JoinGameRequest) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type JoinGameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *JoinGameResponse) Reset() {
	*x = JoinGameResponse{}
	mi := &file_proto_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGameResponse) ProtoMessage() {}

func (x *JoinGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGameResponse.ProtoReflect.Descriptor instead.
func (*JoinGameResponse) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{3}
}

func (x *JoinGameResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *JoinGameResponse) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type MakeMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Position int32  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"` // Positions from 0 to 8 for the 9 cells
}

func (x *MakeMoveRequest) Reset() {
	*x = MakeMoveRequest{}
	mi := &file_proto_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMoveRequest) ProtoMessage() {}

func (x *MakeMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMoveRequest.ProtoReflect.Descriptor instead.
func (*MakeMoveRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{4}
}

func (x *MakeMoveRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MakeMoveRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *MakeMoveRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

type MakeMoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MakeMoveResponse) Reset() {
	*x = MakeMoveResponse{}
	mi := &file_proto_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakeMoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMoveResponse) ProtoMessage() {}

func (x *MakeMoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMoveResponse.ProtoReflect.Descriptor instead.
func (*MakeMoveResponse) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{5}
}

func (x *MakeMoveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MakeMoveResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StreamGameUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *StreamGameUpdatesRequest) Reset() {
	*x = StreamGameUpdatesRequest{}
	mi := &file_proto_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamGameUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGameUpdatesRequest) ProtoMessage() {}

func (x *StreamGameUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGameUpdatesRequest.ProtoReflect.Descriptor instead.
func (*StreamGameUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{6}
}

func (x *StreamGameUpdatesRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *StreamGameUpdatesRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GameUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId       string      `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	BoardState   *BoardState `protobuf:"bytes,2,opt,name=board_state,json=boardState,proto3" json:"board_state,omitempty"`
	NextPlayerId string      `protobuf:"bytes,3,opt,name=next_player_id,json=nextPlayerId,proto3" json:"next_player_id,omitempty"`
	Status       GameStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=proto.GameStatus" json:"status,omitempty"`
}

func (x *GameUpdate) Reset() {
	*x = GameUpdate{}
	mi := &file_proto_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdate) ProtoMessage() {}

func (x *GameUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdate.ProtoReflect.Descriptor instead.
func (*GameUpdate) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{7}
}

func (x *GameUpdate) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameUpdate) GetBoardState() *BoardState {
	if x != nil {
		return x.BoardState
	}
	return nil
}

func (x *GameUpdate) GetNextPlayerId() string {
	if x != nil {
		return x.NextPlayerId
	}
	return ""
}

func (x *GameUpdate) GetStatus() GameStatus {
	if x != nil {
		return x.Status
	}
	return GameStatus_WAITING_FOR_PLAYER
}

type BoardState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells []*Cell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"` // 9 cells for the board
}

func (x *BoardState) Reset() {
	*x = BoardState{}
	mi := &file_proto_game_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardState) ProtoMessage() {}

func (x *BoardState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardState.ProtoReflect.Descriptor instead.
func (*BoardState) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{8}
}

func (x *BoardState) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Mark     Mark  `protobuf:"varint,2,opt,name=mark,proto3,enum=proto.Mark" json:"mark,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	mi := &file_proto_game_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_game_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_proto_game_proto_rawDescGZIP(), []int{9}
}

func (x *Cell) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Cell) GetMark() Mark {
	if x != nil {
		return x.Mark
	}
	return Mark_EMPTY
}

var File_proto_game_proto protoreflect.FileDescriptor

var file_proto_game_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x4a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0f, 0x4a,
	0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x63, 0x0a, 0x0f, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x65, 0x4d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x50, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f,
	0x0a, 0x0a, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22,
	0x43, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x04,
	0x6d, 0x61, 0x72, 0x6b, 0x2a, 0x43, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x1f, 0x0a, 0x04, 0x4d, 0x61, 0x72,
	0x6b, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01,
	0x58, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x4f, 0x10, 0x02, 0x32, 0x95, 0x02, 0x0a, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x4d, 0x61,
	0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x30, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x6b, 0x6c, 0x65, 0x79, 0x6e, 0x2f, 0x74, 0x69,
	0x63, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_game_proto_rawDescOnce sync.Once
	file_proto_game_proto_rawDescData = file_proto_game_proto_rawDesc
)

func file_proto_game_proto_rawDescGZIP() []byte {
	file_proto_game_proto_rawDescOnce.Do(func() {
		file_proto_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_game_proto_rawDescData)
	})
	return file_proto_game_proto_rawDescData
}

var file_proto_game_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_game_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_game_proto_goTypes = []any{
	(GameStatus)(0),                  // 0: proto.GameStatus
	(Mark)(0),                        // 1: proto.Mark
	(*CreateGameRequest)(nil),        // 2: proto.CreateGameRequest
	(*CreateGameResponse)(nil),       // 3: proto.CreateGameResponse
	(*JoinGameRequest)(nil),          // 4: proto.JoinGameRequest
	(*JoinGameResponse)(nil),         // 5: proto.JoinGameResponse
	(*MakeMoveRequest)(nil),          // 6: proto.MakeMoveRequest
	(*MakeMoveResponse)(nil),         // 7: proto.MakeMoveResponse
	(*StreamGameUpdatesRequest)(nil), // 8: proto.StreamGameUpdatesRequest
	(*GameUpdate)(nil),               // 9: proto.GameUpdate
	(*BoardState)(nil),               // 10: proto.BoardState
	(*Cell)(nil),                     // 11: proto.Cell
}
var file_proto_game_proto_depIdxs = []int32{
	10, // 0: proto.GameUpdate.board_state:type_name -> proto.BoardState
	0,  // 1: proto.GameUpdate.status:type_name -> proto.GameStatus
	11, // 2: proto.BoardState.cells:type_name -> proto.Cell
	1,  // 3: proto.Cell.mark:type_name -> proto.Mark
	2,  // 4: proto.GameService.CreateGame:input_type -> proto.CreateGameRequest
	4,  // 5: proto.GameService.JoinGame:input_type -> proto.JoinGameRequest
	6,  // 6: proto.GameService.MakeMove:input_type -> proto.MakeMoveRequest
	8,  // 7: proto.GameService.StreamGameUpdates:input_type -> proto.StreamGameUpdatesRequest
	3,  // 8: proto.GameService.CreateGame:output_type -> proto.CreateGameResponse
	5,  // 9: proto.GameService.JoinGame:output_type -> proto.JoinGameResponse
	7,  // 10: proto.GameService.MakeMove:output_type -> proto.MakeMoveResponse
	9,  // 11: proto.GameService.StreamGameUpdates:output_type -> proto.GameUpdate
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_game_proto_init() }
func file_proto_game_proto_init() {
	if File_proto_game_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_game_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_game_proto_goTypes,
		DependencyIndexes: file_proto_game_proto_depIdxs,
		EnumInfos:         file_proto_game_proto_enumTypes,
		MessageInfos:      file_proto_game_proto_msgTypes,
	}.Build()
	File_proto_game_proto = out.File
	file_proto_game_proto_rawDesc = nil
	file_proto_game_proto_goTypes = nil
	file_proto_game_proto_depIdxs = nil
}

=== /Users/michaelkleyn/Projects/apps/tictactoe-grpc/server/server.go ===
/*
Package main implements a gRPC server for a Tic-Tac-Toe game, allowing players to create games, join existing games, make moves, and receive game updates.

This package uses Protocol Buffers for defining the game service and data structures.
*/

package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net"
	"sync"

	pb "github.com/michaelkleyn/tictactoe-grpc/proto"
	"google.golang.org/grpc"

	// "google.golang.org/grpc/credentials/insecure"
	"github.com/google/uuid"
)

// server represents the gRPC server for managing the Tic-Tac-Toe games.
type server struct {
	pb.UnimplementedGameServiceServer
	games map[string]*GameSession
	mu    sync.Mutex
}

func NewServer() *server {
	return &server{
		games: make(map[string]*GameSession),
	}
}

type GameSession struct {
	GameID       string
	Players      map[string]*Player
	Board        [9]pb.Mark
	NextPlayerID string
	Status       pb.GameStatus
	UpdateChans  map[string]chan *pb.GameUpdate
	mu           sync.Mutex
}

type Player struct {
	PlayerID   string
	PlayerName string
	Mark       pb.Mark
}

func (s *server) CreateGame(ctx context.Context, req *pb.CreateGameRequest) (*pb.CreateGameResponse, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	gameID := generateID()
	playerID := generateID()

	player := &Player{
		PlayerID:   playerID,
		PlayerName: req.PlayerName,
		Mark:       pb.Mark_X,
	}

	game := &GameSession{
		GameID:       gameID,
		Players:      map[string]*Player{playerID: player},
		Board:        [9]pb.Mark{},
		NextPlayerID: playerID,
		Status:       pb.GameStatus_WAITING_FOR_PLAYER,
		UpdateChans:  make(map[string]chan *pb.GameUpdate),
	}

	s.games[gameID] = game

	log.Printf("Game %s created by player %s", gameID, playerID)

	return &pb.CreateGameResponse{
		GameId:   gameID,
		PlayerId: playerID,
	}, nil
}

func (s *server) JoinGame(ctx context.Context, req *pb.JoinGameRequest) (*pb.JoinGameResponse, error) {
	s.mu.Lock()
	game, exists := s.games[req.GameId]
	s.mu.Unlock()

	if !exists {
		return nil, errors.New("Game Not Found")
	}

	game.mu.Lock()
	defer game.mu.Unlock()

	if len(game.Players) >= 2 {
		return nil, errors.New("Game Already Has 2 Players")
	}

	playerID := generateID()
	mark := pb.Mark_O

	for _, player := range game.Players {
		if player.Mark == pb.Mark_O {
			mark = pb.Mark_X
			break
		}
	}

	player := &Player{
		PlayerID:   playerID,
		PlayerName: req.PlayerName,
		Mark:       mark,
	}

	game.Players[playerID] = player
	game.Status = pb.GameStatus_IN_PROGRESS

	log.Printf("Player %s joined game %s", playerID, game.GameID)

	// Notify players about the game start
	game.broadcastUpdate()

	return &pb.JoinGameResponse{
		GameId:   game.GameID,
		PlayerId: playerID,
	}, nil
}

func (s *server) MakeMove(ctx context.Context, req *pb.MakeMoveRequest) (*pb.MakeMoveResponse, error) {
	s.mu.Lock()
	game, exists := s.games[req.GameId]
	s.mu.Unlock()

	if !exists {
		return nil, errors.New("Game Not Found")
	}

	game.mu.Lock()
	defer game.mu.Unlock()

	if game.NextPlayerID != req.PlayerId {
		return &pb.MakeMoveResponse{
			Success: false,
			Message: "Not Your Turn",
		}, nil
	}

	if req.Position < 0 || req.Position > 8 {
		return &pb.MakeMoveResponse{
			Success: false,
			Message: "Invalid Move",
		}, nil
	}

	if game.Board[req.Position] != pb.Mark_EMPTY {
		return &pb.MakeMoveResponse{
			Success: false,
			Message: "Space Already Taken",
		}, nil
	}

	player := game.Players[req.PlayerId]
	game.Board[req.Position] = player.Mark

	// Check for a win or draw
	winner := checkWinner(game.Board)
	if winner != pb.Mark_EMPTY {
		game.Status = pb.GameStatus_FINISHED
		game.broadcastUpdate()
		return &pb.MakeMoveResponse{
			Success: true,
			Message: fmt.Sprintf("Player %s wins!", req.PlayerId),
		}, nil
	}

	if isBoardFull(game.Board) {
		game.Status = pb.GameStatus_FINISHED
		game.broadcastUpdate()
		return &pb.MakeMoveResponse{
			Success: true,
			Message: "Game is a draw!",
		}, nil
	}

	// Switch turns
	for pid := range game.Players {
		if pid != req.PlayerId {
			game.NextPlayerID = pid
			break
		}
	}

	game.broadcastUpdate()

	return &pb.MakeMoveResponse{
		Success: true,
		Message: "move accepted",
	}, nil
}

func (s *server) StreamGameUpdates(req *pb.StreamGameUpdatesRequest, stream pb.GameService_StreamGameUpdatesServer) error {
	s.mu.Lock()
	game, exists := s.games[req.GameId]
	s.mu.Unlock()

	if !exists {
		return errors.New("Game Not Found")
	}

	game.mu.Lock()
	updateChan := make(chan *pb.GameUpdate, 10)
	game.UpdateChans[req.PlayerId] = updateChan
	game.mu.Unlock()

	defer func() {
		game.mu.Lock()
		delete(game.UpdateChans, req.PlayerId)
		game.mu.Unlock()
	}()

	// Send initial game state
	err := stream.Send(game.toGameUpdate())
	if err != nil {
		return err
	}

	// Stream updates
	for update := range updateChan {
		if err := stream.Send(update); err != nil {
			return err
		}
	}

	return nil
}

// Utility functions

func (game *GameSession) broadcastUpdate() {
	gameUpdate := game.toGameUpdate()
	for _, ch := range game.UpdateChans {
		ch := ch
		select {
		case ch <- gameUpdate:
		default:
			// Skip if the channel is full
		}
	}
}

func (game *GameSession) toGameUpdate() *pb.GameUpdate {
	cells := make([]*pb.Cell, 9)
	for i, mark := range game.Board {
		cells[i] = &pb.Cell{
			Position: int32(i),
			Mark:     mark,
		}
	}

	boardState := &pb.BoardState{
		Cells: cells,
	}

	return &pb.GameUpdate{
		GameId:       game.GameID,
		BoardState:   boardState,
		NextPlayerId: game.NextPlayerID,
		Status:       game.Status,
	}
}

func checkWinner(board [9]pb.Mark) pb.Mark {
	winningCombinations := [][3]int{
		{0, 1, 2},
		{3, 4, 5},
		{6, 7, 8},
		{0, 3, 6},
		{1, 4, 7},
		{2, 5, 8},
		{0, 4, 8},
		{2, 4, 6},
	}

	for _, combo := range winningCombinations {
		if board[combo[0]] != pb.Mark_EMPTY &&
			board[combo[0]] == board[combo[1]] &&
			board[combo[1]] == board[combo[2]] {
			return board[combo[0]]
		}
	}

	return pb.Mark_EMPTY
}

func isBoardFull(board [9]pb.Mark) bool {
	for _, mark := range board {
		if mark == pb.Mark_EMPTY {
			return false
		}
	}
	return true
}

func generateID() string {
	return uuid.NewString()[:6]
}

func main() {
	listener, err := net.Listen("tcp", ":50051")
	if err != nil {
		log.Fatalf("Failed to listen on port 50051: %v", err)
	}

	grpcServer := grpc.NewServer()
	pb.RegisterGameServiceServer(grpcServer, NewServer())

	log.Println("Game server is running on port 50051...")
	if err := grpcServer.Serve(listener); err != nil {
		log.Fatalf("Failed to serve gRPC server: %v", err)
	}
}

=== /Users/michaelkleyn/Projects/apps/tictactoe-grpc/client/client.go ===
package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"sync"

	pb "github.com/michaelkleyn/tictactoe-grpc/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func main() {
	conn, error := grpc.Dial("localhost:50051", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if error != nil {
		log.Fatalf("Could not connect to server: %v", error)
	}
	defer conn.Close()

	client := pb.NewGameServiceClient(conn)

	reader := bufio.NewReader(os.Stdin)
	fmt.Print("Please enter username: ")
	playerName, _ := reader.ReadString('\n')
	playerName = strings.TrimSpace(playerName)

	fmt.Println("1. Create Game")
	fmt.Println("2. Join Game")
	fmt.Print("Choice: ")
	choice, _ := reader.ReadString('\n')
	choice = strings.TrimSpace(choice)

	var gameID, playerID string
	var waitGroup sync.WaitGroup

	switch choice {
	case "1":
		resp, err := client.CreateGame(context.Background(), &pb.CreateGameRequest{
			PlayerName: playerName,
		})
		if err != nil {
			log.Fatalf("Error creating game: %v", err)
		}
		gameID = resp.GameId
		playerID = resp.PlayerId
		fmt.Printf("Game created. Game ID: %s\n", gameID)
		fmt.Println("Waiting for another player to join...")

	case "2":
		fmt.Print("Enter Game ID to Join: ")
		inputGameID, _ := reader.ReadString('\n')
		gameID = strings.TrimSpace(inputGameID)
		resp, err := client.JoinGame(context.Background(), &pb.JoinGameRequest{
			GameId:     gameID,
			PlayerName: playerName,
		})
		if err != nil {
			log.Fatalf("Error joining game: %v", err)
		}
		playerID = resp.PlayerId
		fmt.Printf("Joined game. Game ID: %s\n", gameID)

	default:
		fmt.Println("Invalid choice")
		return
	}

	// Channel to coordinate between update stream and move input
	gameStateChan := make(chan *pb.GameUpdate, 1)
	waitGroup.Add(1)

	// Start streaming updates in a goroutine
	go func() {
		defer waitGroup.Done()
		streamGameUpdates(client, gameID, playerID, gameStateChan)
	}()

	// Handle game moves
	handleGameplay(client, gameID, playerID, reader, gameStateChan)

	// Clean up
	close(gameStateChan)
	waitGroup.Wait()
}

func streamGameUpdates(client pb.GameServiceClient, gameID, playerID string, gameStateChan chan<- *pb.GameUpdate) {
	ctx := context.Background()
	stream, err := client.StreamGameUpdates(ctx, &pb.StreamGameUpdatesRequest{
		GameId:   gameID,
		PlayerId: playerID,
	})
	if err != nil {
		log.Printf("Error starting update stream: %v", err)
		return
	}

	for {
		update, err := stream.Recv()
		if err != nil {
			log.Printf("Stream closed: %v", err)
			return
		}

		displayGameUpdate(update)
		gameStateChan <- update

		// Show prompt for move if it's this player's turn
		if update.NextPlayerId == playerID {
			fmt.Print("\nYour turn! Enter position (0-8), or 'exit' to quit: ")
		} else if update.Status == pb.GameStatus_WAITING_FOR_PLAYER {
			fmt.Println("\nWaiting for another player to join...")
		} else if update.Status == pb.GameStatus_IN_PROGRESS {
			fmt.Println("\nWaiting for other player's move...")
		} else if update.Status == pb.GameStatus_FINISHED {
			fmt.Println("\nGame Over!")
			return
		}
	}
}

func handleGameplay(client pb.GameServiceClient, gameID, playerID string, reader *bufio.Reader, gameStateChan <-chan *pb.GameUpdate) {
	for update := range gameStateChan {
		if update.Status == pb.GameStatus_FINISHED {
			return
		}

		if update.NextPlayerId == playerID {
			input, _ := reader.ReadString('\n')
			input = strings.TrimSpace(input)

			if input == "exit" {
				return
			}

			position, err := parsePosition(input)
			if err != nil {
				fmt.Println("Invalid input. Please enter a number between 0 and 8.")
				continue
			}

			resp, err := client.MakeMove(context.Background(), &pb.MakeMoveRequest{
				GameId:   gameID,
				PlayerId: playerID,
				Position: int32(position),
			})
			if err != nil {
				fmt.Printf("Error making move: %v\n", err)
				continue
			}

			if !resp.Success {
				fmt.Printf("Invalid move: %s\n", resp.Message)
			}
		}
	}
}

func parsePosition(input string) (int, error) {
	var position int
	_, err := fmt.Sscanf(input, "%d", &position)
	if err != nil || position < 0 || position > 8 {
		return 0, fmt.Errorf("invalid position")
	}
	return position, nil
}

func displayGameUpdate(update *pb.GameUpdate) {
	fmt.Print("\033[H\033[2J") // Clear screen
	fmt.Println("\nCurrent Board:")
	board := update.BoardState.Cells
	for i := 0; i < 9; i += 3 {
		fmt.Printf(" %s | %s | %s\n",
			getMarkSymbol(board[i].Mark),
			getMarkSymbol(board[i+1].Mark),
			getMarkSymbol(board[i+2].Mark))
		if i < 6 {
			fmt.Println("-----------")
		}
	}
}

func getMarkSymbol(mark pb.Mark) string {
	switch mark {
	case pb.Mark_X:
		return "X"
	case pb.Mark_O:
		return "O"
	default:
		return " "
	}
}

